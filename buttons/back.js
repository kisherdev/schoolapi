const { getClasses } = require('../utils/getClasses.js')
const { getWeekDays } = require('../utils/getWeekDay.js')

async function back(bot, callbackQuery) {
    action = callbackQuery.data.split('_')[1]
    if (action === 'selclass') {
        const classes = await getClasses();
        keyboard = []
        for (i of classes) {
            keyboard.push([{ text: i, callback_data: `class_${i}` }])
        }
    
        await bot.editMessageText(`üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n‚ùóÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ - **–≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å**.`, {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id,
            parse_mode: "Markdown",
            reply_markup: JSON.stringify({
                inline_keyboard: keyboard
            })
        })
    } if (action === 'seldate') {
        const className = callbackQuery.data.split('_')[2]
        const days = getWeekDays();
        let keyboard = [];

        for (let { date, day } of days) {
            keyboard.push([{ text: `üìÖ ${date} | ${day}`, callback_data: `schedule_${className}_${date}` }]);
        }

        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_selclass' }]);

        await bot.editMessageText(`üìå –ö–ª–∞—Å—Å: \`${className}\`\n\n‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.`, {
            message_id: callbackQuery.message.message_id,
            chat_id: callbackQuery.message.chat.id,
            parse_mode: 'Markdown', 
            reply_markup: JSON.stringify({
                inline_keyboard: keyboard
            })
        })
    }
}

module.exports = { back }